import { InlineKeyboard } from 'grammy';
import { User as TelegramUser } from '@grammyjs/types';
import { type MyConversation, type MyContext } from '../types/types';
import { logError } from '../utils/utilFunctions';
import Promocode from '../../db/Promocode';
import User from '../../db/User';
import { SUPPORT_MESSAGE_POSTFIX } from '../utils/consts';

const cancelKeyboard = new InlineKeyboard().text(
  '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
  'cancelPromocode',
);

export async function promocodeConversation(
  conversation: MyConversation,
  ctx: MyContext,
) {
  try {
    const { id } = ctx.from as TelegramUser;

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', {
      reply_markup: cancelKeyboard,
      parse_mode: 'MarkdownV2',
    });

    const { message } = await conversation.waitFor('message:text');

    const promocode = await Promocode.findOne({ code: message.text.trim() });
    if (!promocode) {
      await ctx.reply('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ü§î');
      return;
    }
    if (promocode.validUntil && promocode.validUntil < new Date()) {
      await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫ ‚åõ');
      return;
    }
    if (
      promocode.timesUsedLimit &&
      promocode.timesUsed >= promocode.timesUsedLimit
    ) {
      await ctx.reply(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ üö´',
      );
      return;
    }

    const user = await conversation.external(() =>
      User.findOne({ telegramId: id }),
    );
    if (!user) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }
    if (user.usedPromocodes.includes(promocode.code)) {
      await ctx.reply('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω üö´');
      return;
    }

    const date = await conversation.external(() => new Date());
    if (promocode.tokenAmount) {
      await conversation.external(() =>
        User.updateOne(
          { telegramId: id },
          {
            updatedAt: date,
            tokensBalance: user.tokensBalance + promocode.tokenAmount!,
            usedPromocodes: [...user.usedPromocodes, promocode.code],
          },
        ),
      );
      await conversation.external(() =>
        Promocode.updateOne(
          { code: promocode.code },
          {
            updatedAt: date,
            timesUsed: promocode.timesUsed + 1,
          },
        ),
      );
    }

    await ctx.reply(
      '*–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω\\!* üéâ\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –≤ –º–µ–Ω—é ‚Üì',
      {
        parse_mode: 'MarkdownV2',
      },
    );
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in promocode conversation',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }

  return;
}
