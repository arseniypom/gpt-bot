import 'dotenv/config';
import { InlineKeyboard } from 'grammy';
import { User as TelegramUser } from '@grammyjs/types';
import { generateImage } from '../utils/gpt';
import { logError, sendMessageToAdmin } from '../utils/utilFunctions';
import {
  type MyConversation,
  type MyContext,
  SubscriptionLevels,
} from '../types/types';
import User from '../../db/User';
import {
  BUTTON_LABELS,
  getNoBalanceMessage,
  IMAGE_GENERATION_COST,
  SUPPORT_MESSAGE_POSTFIX,
} from '../utils/consts';
import { getTopupAndManageSubscriptionKeyboard } from '../commands/topup';
import Images from '../../db/Images';
import bot from '../../bot';

const cancelKeyboard = new InlineKeyboard().text(
  '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
  'cancelImageGeneration',
);

export async function imageConversation(
  conversation: MyConversation,
  ctx: MyContext,
) {
  try {
    const { id } = ctx.from as TelegramUser;
    const userObj = await conversation.external(() =>
      User.findOne({ telegramId: id }),
    );
    if (!userObj) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }
    if (
      userObj.imageGenerationLeftThisMonth === 0 &&
      userObj.tokensBalance - IMAGE_GENERATION_COST < 0
    ) {
      await ctx.reply(
        getNoBalanceMessage({
          reqType: 'image',
          canActivateTrial: userObj.canActivateTrial,
          isFreeUser: userObj.subscriptionLevel === SubscriptionLevels.FREE,
        }),
        {
          reply_markup: getTopupAndManageSubscriptionKeyboard(
            userObj.subscriptionLevel,
          ),
          parse_mode: 'MarkdownV2',
        },
      );
      return;
    }

    await ctx.reply('–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?', {
      reply_markup: cancelKeyboard,
    });

    const { message } = await conversation.waitFor('message:text');

    if (Object.values(BUTTON_LABELS).includes(message.text)) {
      await ctx.reply(
        `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *${message.text}* –ø–æ–≤—Ç–æ—Ä–Ω–æ`,
        {
          parse_mode: 'MarkdownV2',
        },
      );
      return;
    }
    if (message.text.length > 1500) {
      await ctx.reply(
        '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /image.',
      );
      return;
    }

    const responseMessage = await ctx.reply('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

    const user = await conversation.external(() =>
      User.findOne({ telegramId: id }),
    );
    let imageData;
    try {
      imageData = await generateImage(
        message.text,
        conversation.session.imageQuality,
      );
    } catch (error) {
      if (
        (error as any).status === 400 &&
        (error as any).code === 'content_policy_violation'
      ) {
        await responseMessage.editText(
          '‚ùå –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ DALL-E –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –í–∞—à –∑–∞–ø—Ä–æ—Å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ –∏–ª–∏ –∏–Ω—ã—Ö –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support, –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.',
        );
        await conversation.external(() =>
          Images.create({
            userId: user!._id,
            prompt: message.text,
          }),
        );
        return;
      }
      throw error;
    }
    if (!imageData.url) {
      throw new Error('Image generation failed: no image URL');
    }
    await ctx.replyWithPhoto(imageData.url);
    await ctx.replyWithDocument(imageData.url, {
      caption: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Å–∂–∞—Ç–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ) üìé',
    });
    await responseMessage.editText('–ì–æ—Ç–æ–≤–æ!');

    if (
      process.env.ADMIN_TELEGRAM_ID &&
      id !== Number(process.env.ADMIN_TELEGRAM_ID)
    ) {
      await bot.api.sendPhoto(process.env.ADMIN_TELEGRAM_ID, imageData.url, {
        caption: message.text,
      });
    }

    const date = await conversation.external(() => new Date());
    if (user!.imageGenerationLeftThisMonth > 0) {
      await conversation.external(() =>
        User.updateOne(
          { telegramId: id },
          {
            updatedAt: date,
            imageGenerationLeftThisMonth:
              user!.imageGenerationLeftThisMonth - 1,
            stats: {
              ...user!.stats,
              imgGensMade: user!.stats.imgGensMade + 1,
            },
          },
        ),
      );
    } else {
      await conversation.external(() =>
        User.updateOne(
          { telegramId: id },
          {
            updatedAt: date,
            tokensBalance: user!.tokensBalance - IMAGE_GENERATION_COST,
            stats: {
              ...user!.stats,
              imgGensMade: user!.stats.imgGensMade + 1,
            },
          },
        ),
      );
    }

    await conversation.external(() =>
      Images.create({
        userId: user!._id,
        prompt: message.text,
        revisedPrompt: imageData.revisedPrompt,
      }),
    );
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in image conversation',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }

  return;
}
