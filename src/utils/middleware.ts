import { InlineKeyboard, NextFunction } from 'grammy';
import { User as TelegramUser } from '@grammyjs/types';
import User from '../../db/User';
import { logError } from './utilFunctions';
import { MyContext } from '../types/types';
import { isMyContext } from '../types/typeguards';
import logger from './logger';
import { BUTTON_LABELS, SUPPORT_MESSAGE_POSTFIX } from './consts';
import { checkIsChannelMember } from '../commands/start';
import { getChannelTelegramName } from '../utils/utilFunctions';

const channelTelegramName = getChannelTelegramName();
if (!channelTelegramName) {
  throw new Error('Env var CHANNEL_TELEGRAM_NAME_* is not defined');
}

const subscribeToChannelKeyboard = new InlineKeyboard()
  .url('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', `https://t.me/${channelTelegramName}`)
  .row()
  .text('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ –∫–∞–Ω–∞–ª', 'checkChannelJoin');

export const checkUserInDB = async (
  ctx: MyContext | { chat: { type: 'private' | 'channel' } },
  next: NextFunction,
): Promise<void> => {
  if (ctx.chat?.type === 'channel') {
    return;
  }

  const whiteListCallbackQueries = [
    'startStep2',
    'startStep3',
    'startStep4',
    'startStep5',
    'startStep6',
    'startStep7',
    'startSkip',
  ];

  if (
    !isMyContext(ctx) ||
    ctx.hasCommand('start') ||
    ctx.hasCommand('support') ||
    (await ctx.conversation.active())?.supportConversation ||
    ctx.message?.text === BUTTON_LABELS.support ||
    whiteListCallbackQueries.includes(ctx.callbackQuery?.data || '')
  ) {
    await next();
    return;
  }

  try {
    const { id } = ctx.from as TelegramUser;

    const isChannelMember = await checkIsChannelMember(id);

    if (isChannelMember) {
      await next();
      return;
    }

    if (ctx.callbackQuery?.data === 'checkChannelJoin') {
      await ctx.answerCallbackQuery({
        text: '–ù–µ –Ω–∞—à–ª–∏ –í–∞—Å –≤ —á–∏—Å–ª–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞',
        show_alert: true,
      });
      return;
    }

    await ctx.reply(
      `–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª [–ö—É—Ö–Ω—è –ò–ò](https://t.me/${channelTelegramName}) üîó\n\n_üîê –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –±–æ—Ç–æ–≤, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatGPT_\\.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è\\(–ª–∞—Å—å\\) –Ω–∞ –∫–∞–Ω–∞–ª"`,
      {
        parse_mode: 'MarkdownV2',
        reply_markup: subscribeToChannelKeyboard,
      },
    );
    return;
  } catch (error) {
    logError({
      message: 'Middleware: Error checking user channel membership',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
    await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ${SUPPORT_MESSAGE_POSTFIX}`);
  }
};

export const ignoreOld = async (
  ctx: MyContext,
  next: NextFunction,
): Promise<void> => {
  // 5 mins threshold
  const threshold = 5 * 60;
  if (
    !ctx.callbackQuery &&
    ctx.msg?.date &&
    new Date().getTime() / 1000 - ctx.msg.date > threshold
  ) {
    logger.info(
      `Ignoring message | TEXT: '${ctx.msg.text}' | USER ID: '${
        ctx.from?.id
      }' | CHAT ID: '${ctx.chat?.id}' (${new Date().getTime() / 1000}:${
        ctx.msg.date
      })`,
    );
    return;
  }
  await next();
};
