import { User as TelegramUser } from '@grammyjs/types';
import { CallbackQueryContext } from 'grammy';
import {
  AssistantRoleLabels,
  AssistantRole,
  MyContext,
  SubscriptionLevels,
} from '../types/types';
import User from '../../db/User';
import {
  SUPPORT_MESSAGE_POSTFIX,
  ROLES_DESCRIPTION_MESSAGE,
} from '../utils/consts';
import { logError } from '../utils/utilFunctions';
import { InlineKeyboard } from 'grammy';
import { getSubscriptionLevelsKeyboard } from './subscription';
import { addSubscriptionKeyboard } from '../conversations/imageConversation';
import { addSubscriptionKeyboardWithTrial } from '../conversations/imageConversation';

const getRolesKeyboard = (
  activeRole: AssistantRole | undefined,
  isFreeUser: boolean,
) => {
  const rolesBtns = Object.entries(AssistantRoleLabels).map(([name, label]) => {
    switch (name) {
      case 'translator':
        if (isFreeUser) {
          return [`üîí ${label}`, name];
        } else if (activeRole === 'translator') {
          return [`‚úÖ ${label}`, name];
        } else {
          return [label, name];
        }
      case 'general':
      default:
        if (activeRole === 'general' || !activeRole) {
          return [`‚úÖ ${label}`, name];
        } else {
          return [label, name];
        }
    }
  });
  const rolesRow = rolesBtns.map(([label, data]) =>
    InlineKeyboard.text(label, data),
  );
  return InlineKeyboard.from([
    [...rolesRow],
    [InlineKeyboard.text('‚Üê –ù–∞–∑–∞–¥', 'backToSettings')],
  ]);
};

export const chooseRoleMenu = async (ctx: CallbackQueryContext<MyContext>) => {
  await ctx.answerCallbackQuery();
  const { id } = ctx.from as TelegramUser;

  try {
    const user = await User.findOne({ telegramId: id });
    if (!user) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }
    const role = user.assistantRole;
    const isFreeUser = user.subscriptionLevel === SubscriptionLevels.FREE;
    await ctx.callbackQuery.message?.editText(ROLES_DESCRIPTION_MESSAGE, {
      reply_markup: getRolesKeyboard(role, isFreeUser),
      parse_mode: 'MarkdownV2',
    });
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in chooseRoleMenu command',
      error,
      telegramId: id,
      username: ctx.from?.username,
    });
  }
};

export const setRole = async (ctx: CallbackQueryContext<MyContext>) => {
  await ctx.answerCallbackQuery();
  const { id } = ctx.from as TelegramUser;

  try {
    const user = await User.findOne({ telegramId: id });
    if (!user) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    const role = ctx.callbackQuery.data as AssistantRole;
    const isFreeUser = user.subscriptionLevel === SubscriptionLevels.FREE;

    if (isFreeUser && role !== 'general') {
      let keyboard;
      if (user.canActivateTrial) {
        keyboard = addSubscriptionKeyboardWithTrial;
      } else {
        keyboard = addSubscriptionKeyboard;
      }

      await ctx.reply(
        `*–†–æ–ª—å ${AssistantRoleLabels[role]} –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π üîí*\n\n–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Äì –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Ü–µ–Ω–µ —á–∞—à–∫–∏ –∫–æ—Ñ–µ –∏–ª–∏ –¥–µ—à–µ–≤–ª–µ\\! ‚òï`,
        {
          parse_mode: 'MarkdownV2',
          reply_markup: keyboard,
        },
      );
      return;
    }

    if (role === user.assistantRole) {
      return;
    }

    user.assistantRole = role;
    await user.save();

    await ctx.callbackQuery.message?.editText(ROLES_DESCRIPTION_MESSAGE, {
      reply_markup: getRolesKeyboard(role, isFreeUser),
      parse_mode: 'MarkdownV2',
    });
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in chooseRole command',
      error,
      telegramId: id,
      username: ctx.from?.username,
    });
  }
};
