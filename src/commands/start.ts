import 'dotenv/config';
import { User as TelegramUser } from '@grammyjs/types';
import { logError } from '../utils/utilFunctions';
import { START_MESSAGE_V2, SUPPORT_MESSAGE_POSTFIX } from '../utils/consts';
import { MyContext, SubscriptionLevels } from '../types/types';
import User from '../../db/User';
import Chat from '../../db/Chat';
import { CallbackQueryContext, InlineKeyboard, Keyboard } from 'grammy';
import bot from '../../bot';
import { getChannelTelegramName } from '../utils/utilFunctions';

const channelTelegramName = getChannelTelegramName();
const isRegistrationEnabled =
  process.env.NEW_USERS_REGISTRATION_AVAILABLE === 'true';

if (!channelTelegramName) {
  throw new Error('Env var CHANNEL_TELEGRAM_NAME_* is not defined');
}

const startKeyboard = new InlineKeyboard()
  .url('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', `https://t.me/${channelTelegramName}`)
  .row()
  .text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'checkChannelJoinAndRegisterUser');

export const start = async (ctx: MyContext) => {
  if (!isRegistrationEnabled) {
    await ctx.reply(
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
    );
    return;
  }
  await ctx.reply(
    '–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá\n\n–≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –±–æ—Ç–æ–≤\\.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"',
    {
      parse_mode: 'MarkdownV2',
      reply_markup: startKeyboard,
    },
  );
};

export const checkChannelJoinAndRegisterUser = async (
  ctx: CallbackQueryContext<MyContext>,
) => {
  await ctx.answerCallbackQuery();
  const { id, username } = ctx.from as TelegramUser;
  try {
    const member = await bot.api.getChatMember(`@${channelTelegramName}`, id);
    switch (member.status) {
      case 'creator':
      case 'administrator':
      case 'member':
        await ctx.callbackQuery.message?.editText(
          '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
        );
        await registerUser(ctx);
        break;
      case 'restricted':
      case 'left':
      case 'kicked':
        await ctx.callbackQuery.message?.editText(
          '–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –í–∞—Å –≤ —á–∏—Å–ª–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ üôÅ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n\n–ï—Å–ª–∏ –í—ã —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –Ω–æ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support',
          {
            reply_markup: startKeyboard,
          },
        );
        break;
    }
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in checkChannelJoinAndRegisterUser callbackQuery',
      error,
      telegramId: id,
      username,
    });
  }
};

export const mainKeyboard = new Keyboard()
  .text('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
  .text('‚öôÔ∏è¬†–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
  .row()
  .text('üéâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
  .row()
  .text('üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
  .row()
  .text('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
  .text('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
  .resized()
  .persistent();

export const mainSubscribedUserKeyboard = new Keyboard()
.text('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
.text('‚öôÔ∏è¬†–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
.row()
.text('ü™ô –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã')
.row()
.text('üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
.row()
.text('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
.text('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
.resized()
.persistent();

export const registerUser = async (ctx: CallbackQueryContext<MyContext>) => {
  const { id, first_name, username } = ctx.from as TelegramUser;

  await ctx.reply(START_MESSAGE_V2, {
    parse_mode: 'MarkdownV2',
    link_preview_options: {
      is_disabled: true,
    },
  });

  try {
    let user = await User.findOne({ telegramId: id });
    if (!user) {
      const responseMsg = await ctx.reply(
        '–°–æ–∑–¥–∞—é –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç, –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É...',
      );
      user = await User.create({
        telegramId: id,
        firstName: first_name,
        userName: username,
      });
      await responseMsg.delete();
      await ctx.reply(
        '–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç —Å–æ–∑–¥–∞–Ω! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí¨\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äì –∫–Ω–æ–ø–∫–∞ "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –Ω–∏–∂–µ üëá',
        {
          reply_markup: mainKeyboard,
        },
      );

      const chat = await Chat.create({
        userId: user._id,
      });

      ctx.session.chatId = chat._id.toString();
    } else {
      const isSubscribed = user.subscriptionLevel !== SubscriptionLevels.FREE;
      await ctx.reply(
        '–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å? –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá',
        {
          reply_markup: isSubscribed
            ? mainSubscribedUserKeyboard
            : mainKeyboard,
        },
      );
    }
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in /start command',
      error,
      telegramId: id,
      username,
    });
  }
};
