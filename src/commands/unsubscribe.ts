import { CallbackQueryContext, InlineKeyboard } from 'grammy';
import { User as TelegramUser } from '@grammyjs/types';
import { MyContext, SubscriptionLevels } from '../types/types';
import User from '../../db/User';
import { SUPPORT_MESSAGE_POSTFIX, UNSUBSCRIBE_REASONS } from '../utils/consts';
import { logError, sendMessageToAdmin } from '../utils/utilFunctions';
import dayjs from 'dayjs';

const unsubscribeVerificationKeyboard = new InlineKeyboard()
  .text('‚ùå –ù–µ—Ç, –≤—ã–π—Ç–∏', 'cancelUnsubscribe')
  .row()
  .text('–î–∞', 'verifySubscriptionCancel');

const unsubscribeReasonKeyboard = new InlineKeyboard()
  .text(UNSUBSCRIBE_REASONS.tokens, 'tokens')
  .row()
  .text(UNSUBSCRIBE_REASONS.somethingNotWorking, 'somethingNotWorking')
  .row()
  .text(UNSUBSCRIBE_REASONS.notUsingBot, 'notUsingBot')
  .row()
  .text(
    UNSUBSCRIBE_REASONS.subscriptionTooExpensive,
    'subscriptionTooExpensive',
  )
  .row()
  .text(UNSUBSCRIBE_REASONS.enoughFreeTariff, 'enoughFreeTariff')
  .row()
  .text(UNSUBSCRIBE_REASONS.otherReason, 'otherReason')
  .row()
  .text('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏', 'cancelUnsubscribe');

export const unsubscribeInitiate = async (
  ctx: CallbackQueryContext<MyContext>,
) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?', {
    reply_markup: unsubscribeVerificationKeyboard,
  });
};

export const getUnsubscribeReason = async (
  ctx: CallbackQueryContext<MyContext>,
) => {
  await ctx.answerCallbackQuery();
  await ctx.callbackQuery.message?.editText(
    '–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å üôÅ\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ ü™¥',
    {
      reply_markup: unsubscribeReasonKeyboard,
    },
  );
};

export const unsubscribeFinalStep = async (
  ctx: CallbackQueryContext<MyContext>,
) => {
  await ctx.answerCallbackQuery();
  try {
    const { id } = ctx.from as TelegramUser;
    const user = await User.findOne({ telegramId: id });
    if (!user) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    const reason = ctx.callbackQuery.data;

    switch (reason) {
      case 'somethingNotWorking':
        sendMessageToAdmin(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–µ "–ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" ‚≠ï`,
        );
      case 'tokens':
      case 'notUsingBot':
      case 'subscriptionTooExpensive':
      case 'enoughFreeTariff':
      case 'otherReason':
        user.unsubscribeReason = reason;
        user.newSubscriptionLevel = SubscriptionLevels.FREE;
        user.updatedAt = new Date();
        await user.save();

        const expirationDate = dayjs(user.subscriptionExpiry).format(
          'DD.MM.YYYY',
        );

        await ctx.callbackQuery.message?.editText(
          `–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ\n–û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ ${expirationDate}\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–∏–º –í–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! üôå`,
        );
        break;
      case 'cancelUnsubscribe':
        await ctx.answerCallbackQuery('–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ');
        await ctx.callbackQuery.message?.editText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        return;
      default:
        break;
    }
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in unsubscribe conversation',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }
};
