import { CallbackQueryContext, InlineKeyboard, InputFile } from 'grammy';
import { logError } from '../utils/utilFunctions';
import { MyContext, SubscriptionLevel } from '../types/types';
import { PACKAGES } from '../bot-packages';
import {
  BUTTON_LABELS,
  SUPPORT_MESSAGE_POSTFIX,
  TOPUP_MESSAGE,
} from '../utils/consts';
import { TOKEN_PACKAGES } from '../bot-token-packages';

const topupKeyboard = new InlineKeyboard()
  .text(`${TOKEN_PACKAGES.token1.tokensNumber}`, 'token1')
  .row()
  .text(`${TOKEN_PACKAGES.token2.tokensNumber}`, 'token2')
  .row()
  .text(`${TOKEN_PACKAGES.token3.tokensNumber}`, 'token3');

export const initiateTopupKeyboard = new InlineKeyboard().text(
  BUTTON_LABELS.buyTokens,
  'topup',
);
export const topupAndManageSubscriptionKeyboard = new InlineKeyboard()
  .text(BUTTON_LABELS.buyTokens, 'topup')
  .row()
  .text('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', 'subscriptionManage');
export const getTopupAndManageSubscriptionKeyboard = (
  subscriptionLevel: SubscriptionLevel,
) => {
  const keyboard = new InlineKeyboard()
    .text(BUTTON_LABELS.buyTokens, 'topup')
    .row();

  if (subscriptionLevel === 'FREE') {
    keyboard.text('üéâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscription');
  } else {
    keyboard.text('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', 'subscriptionManage');
  }

  return keyboard;
};
export const getTopupAndChangeModelKeyboard = (
  subscriptionLevel: SubscriptionLevel,
) => {
  const keyboard = new InlineKeyboard()
    .text(BUTTON_LABELS.buyTokens, 'topup')
    .row();

  if (subscriptionLevel === 'FREE') {
    keyboard.text('üéâ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscription');
  } else {
    keyboard.text('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π', 'subscriptionManage');
  }

  return keyboard.row().text('ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å', 'initiateAiModelChange');
};
/**
 * @deprecated Use topupKeyboard instead
 */
const topupKeyboardForImg = new InlineKeyboard()
  .text(PACKAGES.req1.numberIcon, 'req1')
  .text(PACKAGES.req2.numberIcon, 'req2')
  .text(PACKAGES.req3.numberIcon, 'req3')
  .row()
  .text(PACKAGES.img1.numberIcon, 'img1')
  .text(PACKAGES.img2.numberIcon, 'img2')
  .text(PACKAGES.img3.numberIcon, 'img3')
  .row()
  .text(PACKAGES.combo1.numberIcon, 'combo1')
  .text(PACKAGES.combo2.numberIcon, 'combo2')
  .text(PACKAGES.combo3.numberIcon, 'combo3')
  .row()
  .text('–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤', 'topupText');

/**
 * @deprecated Use topupKeyboard instead
 */
const topupKeyboardForText = new InlineKeyboard()
  .text(PACKAGES.req1.numberIcon, 'req1')
  .text(PACKAGES.req2.numberIcon, 'req2')
  .text(PACKAGES.req3.numberIcon, 'req3')
  .row()
  .text(PACKAGES.img1.numberIcon, 'img1')
  .text(PACKAGES.img2.numberIcon, 'img2')
  .text(PACKAGES.img3.numberIcon, 'img3')
  .row()
  .text(PACKAGES.combo1.numberIcon, 'combo1')
  .text(PACKAGES.combo2.numberIcon, 'combo2')
  .text(PACKAGES.combo3.numberIcon, 'combo3')
  .row();

/**
 * @deprecated Use topup instead
 */
export const topupImg = async (
  ctx: CallbackQueryContext<MyContext> | MyContext,
) => {
  if (ctx.callbackQuery) {
    await ctx.answerCallbackQuery();
  }

  try {
    await ctx.replyWithPhoto(new InputFile('src/images/packages-img.jpeg'), {
      caption: '*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–∞—Ö*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
      parse_mode: 'MarkdownV2',
      reply_markup: topupKeyboardForImg,
    });
  } catch (error) {
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. ${SUPPORT_MESSAGE_POSTFIX}`,
    );
    logError({
      message: 'Error in /topup command',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }
};

/**
 * @deprecated Use topup instead
 */
export const topupText = async (ctx: CallbackQueryContext<MyContext>) => {
  await ctx.answerCallbackQuery();

  try {
    const topupMessage = `
*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤\n–¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è*

*–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã*
1Ô∏è‚É£ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ \\(–±–∞–∑–æ–≤—ã–µ\\) ‚≠êÔ∏è 99‚ÇΩ
2Ô∏è‚É£ 500 –∑–∞–ø—Ä–æ—Å–æ–≤ \\(–±–∞–∑–æ–≤—ã–µ\\) ‚≠êÔ∏è 299‚ÇΩ
3Ô∏è‚É£ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤\n\\(950 –±–∞–∑–æ–≤—ã–µ \\+ 50 –ø—Ä–æ\\) üåü 599‚ÇΩ

*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*
4Ô∏è‚É£ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üñºÔ∏è 119‚ÇΩ
5Ô∏è‚É£ 25 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üñºÔ∏è 259‚ÇΩ
6Ô∏è‚É£ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π üñºÔ∏è 449‚ÇΩ

*–ö–æ–º–±–æ* \\(üíé _—Å–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç_\\)
7Ô∏è‚É£ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ \\+ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 179‚ÇΩ
8Ô∏è‚É£ 500 –∑–∞–ø—Ä–æ—Å–æ–≤ \\+ 25 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 499‚ÇΩ
9Ô∏è‚É£ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ \\(950 –±–∞–∑–æ–≤—ã–µ \\+ 50 –ø—Ä–æ\\)\n\\+ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 899‚ÇΩ
    `;
    await ctx.callbackQuery.message?.delete();
    await ctx.reply(topupMessage, {
      parse_mode: 'MarkdownV2',
      reply_markup: topupKeyboardForText,
    });
  } catch (error) {
    logError({
      message: 'Error in topupText callbackQuery',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }
};

export const topup = async (
  ctx: CallbackQueryContext<MyContext> | MyContext,
) => {
  if (ctx.callbackQuery) {
    await ctx.answerCallbackQuery();
  }

  try {
    await ctx.reply(TOPUP_MESSAGE, {
      parse_mode: 'MarkdownV2',
      reply_markup: topupKeyboard,
    });
  } catch (error) {
    logError({
      message: 'Error in topup callbackQuery or command',
      error,
      telegramId: ctx.from?.id,
      username: ctx.from?.username,
    });
  }
};
