import 'dotenv/config';
import mongoose from 'mongoose';
import User from '../db/User';
import fs from 'fs';
import axios from 'axios';
import { SubscriptionLevels } from '../src/types/types';
import { BUTTON_LABELS } from '../src/utils/consts';
import FormData from 'form-data';
import pLimit from 'p-limit';

export async function sendMessageToAllUsers() {
  const botApiKey = process.env.BOT_API_KEY_DEV;

  await mongoose.connect(process.env.MONGO_DB_URI_DEV!);
  console.log('Mongoose connected');

  const users = await User.find({ isBlockedBot: false });

  console.log(users.length);
  
  const limit = pLimit(10);
  let sentMessages = 0;

  const sendPhotoPromises = users.map((user) => {
    return limit(async () => {
      if (user.telegramId === Number(process.env.ADMIN_TELEGRAM_ID)) {
        const form = new FormData();
        form.append('chat_id', user.telegramId);
        form.append('photo', fs.createReadStream('img1.webp'));
        form.append(
          'caption',
          `*–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã\\. –¶–µ–Ω–∞ ‚Äì –æ—Å—Ç–∞—ë—Ç—Å—è\\.*\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —É–¥–≤–æ–∏–ª–∏, –¥—Ä—É–≥–∏–µ ‚Äì —É—Ç—Ä–æ–∏–ª–∏, –∞ —Ç—Ä–µ—Ç—å–∏\\.\\.\\. —Å–¥–µ–ª–∞–ª–∏ *–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º–∏* ü´¢\n\n–ê —Ç–∞–∫–∂–µ:\n>>>‚ãÖ –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –¥—É–º–∞—é—â—É—é –º–æ–¥–µ–ª—å o1, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö –ø–æ–¥–ø–∏—Å–∫–∏\n>>>‚ãÖ –î–æ–±–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä —Ä–æ–ª–∏: –≤ —Ä–æ–ª–∏ ‚Äú–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫‚Äù –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, —ç–º–æ—Ü–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω—é–∞–Ω—Å—ã\n>>>‚ãÖ –°–¥–µ–ª–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º ‚Äú–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏‚Äù: –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ –∏ –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n\n*–ó–∞–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 1 —Ä—É–±–ª—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–º–∏\\! üî•*`,
        );
        form.append('parse_mode', 'MarkdownV2');

        if (user.subscriptionLevel === SubscriptionLevels.FREE) {
          let keyboard;
          if (user.canActivateTrial) {
            keyboard = [
              [
                {
                  text: 'üî• 3 –¥–Ω—è –∑–∞ 1 —Ä—É–±–ª—å',
                  callback_data: `${SubscriptionLevels.OPTIMUM_TRIAL}-no-delete`,
                },
              ],
            ];
          } else {
            keyboard = [
              [
                {
                  text: BUTTON_LABELS.subscribe,
                  callback_data: 'subscription',
                },
              ],
            ];
          }

          form.append(
            'reply_markup',
            JSON.stringify({
              inline_keyboard: keyboard,
            }),
          );
        }

        try {
          await axios.post(
            `https://api.telegram.org/bot${botApiKey}/sendPhoto`,
            form,
            {
              headers: {
                ...form.getHeaders(),
              },
            },
          );
          sentMessages++;
        } catch (error) {
          console.error(
            `Error sending message to user ${user.telegramId}:`,
            // @ts-ignore
            error.response ? error.response.data : error.message,
          );
        }
      }
    });
  });

  await Promise.all(sendPhotoPromises);

  console.log(`Sent ${sentMessages} messages`);
  await mongoose.disconnect();
  console.log('Mongoose disconnected');
}
