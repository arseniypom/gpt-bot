import 'dotenv/config';
import mongoose from 'mongoose';
import User from '../db/User';
import fs from 'fs';
import axios from 'axios';
import { SubscriptionLevels } from '../src/types/types';
import { BUTTON_LABELS } from '../src/utils/consts';
import FormData from 'form-data';
import pLimit from 'p-limit';

export async function sendMessageToAllUsers() {
  const botApiKey = process.env.BOT_API_KEY_DEV;

  await mongoose.connect(process.env.MONGO_DB_URI_DEV!);
  console.log('Mongoose connected');

  const users = await User.find({ isBlockedBot: false });

  console.log(users.length);
  

  const limit = pLimit(10);
  let sentMessages = 0;

  const sendPhotoPromises = users.map((user) => {
    return limit(async () => {
      if (user.telegramId === Number(process.env.ADMIN_TELEGRAM_ID)) {
        const form = new FormData();
        form.append('chat_id', user.telegramId);
        form.append('photo', fs.createReadStream('img1.webp'));
        form.append(
          'caption',
          `*üó£Ô∏è –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ: –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\\!*\n\n‚Üí –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ __–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤–º–µ—Å—Ç–æ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞__\\!\n–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ\\.\n\n_–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Äì –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏ ‚ö°_`,
        );
        form.append('parse_mode', 'MarkdownV2');

        if (user.subscriptionLevel === SubscriptionLevels.FREE) {
          let keyboard;
          if (user.canActivateTrial) {
            keyboard = [
              [
                {
                  text: 'üî• 3 –¥–Ω—è –∑–∞ 1 —Ä—É–±–ª—å',
                  callback_data: `${SubscriptionLevels.OPTIMUM_TRIAL}-promo`,
                },
              ],
            ];
          } else {
            keyboard = [
              [
                {
                  text: BUTTON_LABELS.subscribe,
                  callback_data: 'subscription',
                },
              ],
            ];
          }

          form.append(
            'reply_markup',
            JSON.stringify({
              inline_keyboard: keyboard,
            }),
          );
        }

        try {
          await axios.post(
            `https://api.telegram.org/bot${botApiKey}/sendPhoto`,
            form,
            {
              headers: {
                ...form.getHeaders(),
              },
            },
          );
          sentMessages++;
        } catch (error) {
          console.error(
            `Error sending message to user ${user.telegramId}:`,
            // @ts-ignore
            error.response ? error.response.data : error.message,
          );
        }
      }
    });
  });

  await Promise.all(sendPhotoPromises);

  console.log(`Sent ${sentMessages} messages`);
  await mongoose.disconnect();
  console.log('Mongoose disconnected');
}
